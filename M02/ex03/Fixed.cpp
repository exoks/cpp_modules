//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£¶‚£¥‚£∂‚£æ‚£ø‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†ª‚†õ‚†ü‚†ã‚†â‚†Ä‚†à‚†§‚†¥‚†∂‚†∂‚¢æ‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä               ìêì  Fixed.cpp ìêî           
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚†Ä‚†Ä‚†§‚†í‚†í‚¢≤‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£¨‚£Ω‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä                                              
//  ‚†Ä‚†Ä‚†Ä‚£Ä‚£é‚¢§‚£∂‚£æ‚†Ö‚†Ä‚†Ä‚¢Ä‚°§‚†è‚†Ä‚†Ä‚†Ä‚††‚£Ñ‚£à‚°ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä      Dev: oezzaou <oussama.ezzaou@gmail.com> 
//  ‚¢Ä‚†î‚†â‚†Ä‚†ä‚†ø‚†ø‚£ø‚†Ç‚††‚†¢‚£§‚†§‚£§‚£º‚£ø‚£∂‚£∂‚£§‚£ù‚£ª‚£∑‚£¶‚£ç‚°ª‚£ø‚£ø‚£ø‚£ø‚°Ä                                              
//  ‚¢æ‚£æ‚£Ü‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á                                              
//  ‚†Ä‚†à‚¢ã‚¢π‚†ã‚†â‚†ô‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á       Created: 2023/08/11 15:38:18 by oezzaou
//  ‚†Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á       Updated: 2025/02/25 15:08:38 by oezzaou
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚†ø‚†ü‚†õ‚†ã‚†õ‚¢ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä                                              
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†á‚†Ä‚¢†‚£ø‚£ü‚£≠‚£§‚£∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚†ª‚†Ä‚†ò‚£ø‚£ø‚£ø‚†á‚†Ä                                              
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†±‚†§‚†ä‚†Ä‚¢Ä‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†è‚†Ä‚†Ä                             ìÜ©‚ôïìÜ™      
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†ã‚†Ä‚†Ä‚†Ä                     ìÑÇ oussama ezzaouìÜÉ  
//  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ñ‚£Ä‚°Ä‚†∏‚†ì‚†Ä‚†Ä‚†Ä‚††‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä                                              

#include "Fixed.hpp"

//===<[ Static const int fracBits init: ]>======================================
const int	Fixed::fracBits = 8;

//===<[ Fixed Default Constructor: ]>===========================================
Fixed::Fixed() : fixedPointNbr(0)
{
}

//===<[ Fixed Constructor 1: ]>=================================================
Fixed::Fixed(float const floatPointNbr)
{
	fixedPointNbr = roundf(floatPointNbr * ((float) (1 << fracBits)));
}

//===<[ Fixed Constructor 2: ]>=================================================
Fixed::Fixed(int const intNbr)
{
	fixedPointNbr = intNbr << fracBits;
}

//===<[ Fixed Copy Constructor: ]>==============================================
Fixed::Fixed(const Fixed &fixed)
{
	(*this) = fixed;
}

//===<[ Fixed Distructor: ]>====================================================
Fixed::~Fixed()
{
}

//===<[ Fixed Copy Assignment Operator: ]>======================================
Fixed&	Fixed::operator= (const Fixed& fixed)
{
	fixedPointNbr = fixed.getRawBits();
	return (*this);
}

//===<[ Fixed > Operator: ]>====================================================
bool	Fixed::operator> (const Fixed& fixed) const
{
	return (fixedPointNbr > fixed.getRawBits());
}

//===<[ Fixed < Operator: ]>====================================================
bool	Fixed::operator< (const Fixed& fixed) const
{
	return (fixedPointNbr < fixed.getRawBits());
}

//===<[ Fixed <= Operator: ]>===================================================
bool	Fixed::operator<= (const Fixed& fixed)
{
	return (fixedPointNbr <= fixed.getRawBits());
}

//===<[ Fixed >= Operator: ]>===================================================
bool	Fixed::operator>= (const Fixed& fixed)
{
	return (fixedPointNbr >= fixed.getRawBits());
}

//===<[ Fixed == Operator: ]>===================================================
bool	Fixed::operator== (const Fixed& fixed)
{
	return (fixedPointNbr == fixed.getRawBits());
}

//===<[ Fixed != Operator: ]>===================================================
bool	Fixed::operator!= (const Fixed& fixed)
{
	return (fixedPointNbr != fixed.getRawBits());
}

//===<[ Fixed + Operator: ]>====================================================
Fixed	Fixed::operator+ (const Fixed& fixed)
{
	return (Fixed((*this).toFloat() + fixed.toFloat()));
}

//===<[ Fixed - Operator: ]>====================================================
Fixed	Fixed::operator- (const Fixed& fixed)
{
	return (Fixed((*this).toFloat() - fixed.toFloat()));
}

//===<[ Fixed * Operator: ]>====================================================
Fixed	Fixed::operator* (const Fixed& fixed)
{
	return (Fixed((*this).toFloat() * fixed.toFloat()));
}

//===<[ Fixed / Operator: ]>====================================================
Fixed	Fixed::operator/ (const Fixed& fixed)
{
	return (Fixed((*this).toFloat() / fixed.toFloat()));
}

//===<[ Fixed Pre-Increment Operator: ]>========================================
Fixed&	Fixed::operator++ (void)
{
	++fixedPointNbr;
	return (*this);
}

//===<[ Fixed Post-Increment Operator: ]>=======================================
Fixed	Fixed::operator++ (int)
{
	Fixed	old = (*this);
	fixedPointNbr++;
	return (old);
}

//===<[ getRawBits: ]>==========================================================
int		Fixed::getRawBits(void) const
{
	return (fixedPointNbr);
}

//===<[ setRawBits: ]>==========================================================
void	Fixed::setRawBits(int const raw)
{
	fixedPointNbr = raw;
}

//===<[ toInt: ]>===============================================================
int		Fixed::toInt(void) const
{
	return (fixedPointNbr >> fracBits);
}

//===<[ toFloat: ]>=============================================================
float	Fixed::toFloat(void) const
{
	return (fixedPointNbr / ((float)(1 << fracBits)));
}

//===<[ Min: ]>=================================================================
Fixed& Fixed::min(Fixed& f1, Fixed& f2)
{
	if (f1.getRawBits() < f2.getRawBits())
		return (f1);
	return (f2);
}

//===<[ min const: ]>===========================================================
Fixed& Fixed::min(const Fixed& f1, const Fixed& f2)
{
	if (f1.getRawBits() < f2.getRawBits())
		return ((Fixed&) f1);
	return ((Fixed&) f2);
}

//===<[ Max: ]>=================================================================
Fixed& Fixed::max(Fixed& f1, Fixed& f2)
{
	if (f1.getRawBits() > f2.getRawBits())
		return (f1);
	return (f2);
}

//===<[ Max const: ]>===========================================================
Fixed& Fixed::max(const Fixed& f1, const Fixed& f2)
{
	if (f1.getRawBits() > f2.getRawBits())
		return ((Fixed&) f1);
	return ((Fixed&) f2);
}

//===<[ Insertion operator: ]>==================================================
std::ostream& operator<< (std::ostream& os, const Fixed& fixed)
{
	return (os << fixed.toFloat());
}
